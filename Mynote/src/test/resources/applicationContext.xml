<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
            http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xs
			http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd"
	default-lazy-init="true">
	
	<context:component-scan base-package="com.mywiki">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> 
	</context:component-scan> 
	<context:annotation-config/>
	
    <!-- 配置文件读取 -->  
    <bean name="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
                <value>classpath:jdbc.properties</value>
				<value>classpath:mail/mail.properties</value>
            </list>  
        </property>  
    </bean>
    
	<!-- 在java中可以直接通过 @Value("#{propertiesReader['key']}")进行属性的注入 -->
	<bean id="propertiesReader"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="singleton" value="true" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:deploy.properties</value>
			</list>
		</property>
	</bean>

	<!-- 
	<bean id="dataSource"  
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
        <property name="driverClassName" value="${jdbc.driverClassName}" />  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
    </bean>  -->
    
	<!-- 使用bonecp作为数据库连接池 -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<!-- 相应驱动的jdbcUrl -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 数据库的用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!-- 数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriod" value="${BoneCP.idleConnectionTestPeriod}" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAge" value="${BoneCP.idleMaxAge}" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="${BoneCP.maxConnectionsPerPartition}" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="${BoneCP.minConnectionsPerPartition}" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="${BoneCP.partitionCount}" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="${BoneCP.acquireIncrement}" />
		<!-- 缓存prepared statements的大小，默认值：0 -->
		<property name="statementsCacheSize" value="${BoneCP.statementsCacheSize}" />
		<!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->
		<property name="releaseHelperThreads" value="${BoneCP.releaseHelperThreads}" />
	</bean>


	
	<bean id="sessionFactory"  
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="packagesToScan">  
            <list>  
                <value>com.mywiki.model</value>  
            </list>  
        </property>
         <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>  
                <prop key="hibernate.show_sql">true</prop>  
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>  
                <prop key="hibernate.cache.use_query_cache">false</prop>  
                <prop key="hibernate.jdbc.batch_size">50</prop>  
                <prop key="hibernate.cache.use_second_level_cache">false</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.search.default.directory_provider">org.hibernate.search.store.impl.RAMDirectoryProvider</prop>
                <prop key="hibernate.search.default.indexBase">target/index</prop>
				<prop key="hibernate.search.worker.batch_size">1000</prop>
				<prop key="hibernate.search.analyzer">org.apache.lucene.analysis.SimpleAnalyzer</prop>
            </props>  
        </property>
    </bean>  
  
    <bean id="transactionManager"  
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
        <property name="sessionFactory" ref="sessionFactory" />  
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 名字必须为messageSource,因为springmodules的jar包需要引用验证时需要引用名字为messageSource的bean -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" />
	</bean>

	<bean id="validatorFactory"
		class="org.springmodules.validation.commons.DefaultValidatorFactory">
		<property name="validationConfigLocations">
			<list>
				<value>WEB-INF/validator-rules.xml</value>
				<value>WEB-INF/validation.xml</value>
			</list>
		</property>
	</bean>
	<!-- 在applicationContext.xml中配置validatorFactory和beanValidator (为什么要在applicationContext中配置: 
		因为验证器可作为应用程序公用的组件,可以被所有的servlet共享): -->
	<bean id="beanValidator"
		class="org.springmodules.validation.commons.DefaultBeanValidator">
		<property name="validatorFactory" ref="validatorFactory" />
	</bean>
	
	
	<!-- 启用缓存注解功能 -->
	<ehcache:annotation-driven cache-manager="ehCacheManager" />

	<!-- cacheManager工厂类，指定ehcache.xml的位置 -->
	<bean id="ehCacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		p:configLocation="classpath:/ehcache.xml" />
	
</beans>